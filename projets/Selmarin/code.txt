import tkinter as tk
from tkinter import messagebox, simpledialog, filedialog
from mysql.connector import Error
import pandas as pd
import selmarin
import mysql.connector
from tkinter import ttk  # Pour utiliser Combobox

# Requêtes prédéfinies
requêtes = {
    "Clients à LA ROCHELLE":
        "SELECT COUNT(Num_Cli) AS NB_Cli, Ville_Cli FROM client WHERE Ville_Cli = 'LA ROCHELLE' GROUP BY Ville_Cli;",

    "Total vendu - Gros sel":
        "SELECT P.Num_Pdt, P.Lib_Pdt, SUM(Qte_Sort) AS Total_Vendu FROM produit P JOIN Concerner CO ON P.Num_Pdt = CO.Num_Pdt WHERE P.Lib_Pdt = 'Gros sel' GROUP BY P.Num_Pdt, P.Lib_Pdt;",

    "Clients hors LAGORD & SURGERES":
        "SELECT COUNT(Num_Cli) AS NB_Cli, Ville_Cli FROM client WHERE Ville_Cli NOT IN ('LAGORD', 'SURGERES') GROUP BY Ville_Cli;",

    "Ventes sauf Gros sel / Sel fin":
        "SELECT P.Num_Pdt, P.Lib_Pdt, SUM(CO.Qte_Sort) AS Total_Vendu FROM produit P JOIN Concerner CO ON P.Num_Pdt = CO.Num_Pdt WHERE P.Lib_Pdt NOT IN ('Gros sel', 'Sel fin') GROUP BY P.Num_Pdt, P.Lib_Pdt;",

    "Vue Clients Fleur de Sel":
        "CREATE OR REPLACE VIEW Client_FleurdeSel AS "
        "SELECT COUNT(C.Num_Cli) AS NB_Cli, C.Nom_Cli, C.Precision_Cli, C.Ville_Cli "
        "FROM Client C JOIN Sortie S ON C.Num_Cli = S.Num_Cli "
        "JOIN Concerner CO ON S.Num_Sort = CO.Num_Sort "
        "JOIN Produit P ON CO.Num_Pdt = P.Num_Pdt "
        "WHERE P.Lib_Pdt = 'Fleur de sel' "
        "GROUP BY C.Nom_Cli, C.Precision_Cli, C.Ville_Cli;",

    "Clients ayant acheté Gros sel":
        "SELECT COUNT(C.Num_Cli) AS NB_Cli, C.Nom_Cli, C.Precision_Cli, C.Ville_Cli "
        "FROM Client C JOIN Sortie S ON C.Num_Cli = S.Num_Cli "
        "JOIN Concerner CO ON S.Num_Sort = CO.Num_Sort "
        "JOIN Produit P ON CO.Num_Pdt = P.Num_Pdt "
        "WHERE P.Lib_Pdt = 'Gros sel' "
        "GROUP BY C.Nom_Cli, C.Precision_Cli, C.Ville_Cli;",

    "Totaux Achats/Ventes après 2023":
        "SELECT SUM(Prix_Achat) AS Total_Achat, SUM(Prix_Vente) AS Total_Vente, Annee "
        "FROM Prix GROUP BY Annee HAVING Annee > 2023;",

    "Ajout Saunier":
        "INSERT INTO Saunier VALUES (9, 'Dupont', 'Jean', 'Verneuil');",

    "Suppression Client 4":
        "DELETE FROM Client WHERE Num_Cli = 4;",

    "Augmentation prix 2025":
        "UPDATE Prix SET Prix_Vente = Prix_Vente * 1.05 WHERE Annee = 2025;"
}

def connect_to_database():
    try:
        connection = mysql.connector.connect(
            host="127.0.0.1",
            user="root",
            database="selmarin"
        )
        connection.autocommit = True
        
        if connection.is_connected():
            messagebox.showinfo("Connexion", "Connexion réussie à la base de données MySQL.")
            return connection
    except Error as e:
        messagebox.showerror("Erreur", f"Erreur lors de la connexion : {e}")
        return None

def show_tables(cursor):
    try:
        cursor.execute("SHOW TABLES")
        tables = cursor.fetchall()
        table_list = "\n".join([table[0] for table in tables])
        messagebox.showinfo("Tables", f"Tables dans la base de données :\n{table_list}")
    except Error as e:
        messagebox.showerror("Erreur", f"Erreur lors de l'affichage des tables : {e}")

def view_table_content(cursor):
    table_name = simpledialog.askstring("Voir Contenu", "Entrez le nom de la table à afficher :")
    if table_name:
        try:
            cursor.execute(f"SELECT * FROM {table_name}")
            rows = cursor.fetchall()
            if rows:
                column_names = [i[0] for i in cursor.description]
                content = "\n".join([", ".join(map(str, row)) for row in rows])
                messagebox.showinfo("Contenu", f"Colonnes : {', '.join(column_names)}\n\n{content}")
            else:
                messagebox.showinfo("Contenu", "La table est vide.")
        except Error as e:
            messagebox.showerror("Erreur", f"Erreur lors de l'affichage du contenu : {e}")

def modify_table(cursor):
    table_name = simpledialog.askstring("Modifier Table", "Entrez le nom de la table à modifier :")
    query = simpledialog.askstring("Requête SQL", "Entrez la requête SQL pour modifier la table :")
    if table_name and query:
        try:
            cursor.execute(query)
            messagebox.showinfo("Succès", "Modification effectuée avec succès.")
        except Error as e:
            messagebox.showerror("Erreur", f"Erreur lors de la modification : {e}")

def execute_query(cursor):
    query = simpledialog.askstring("Requête SQL", "Entrez votre requête SQL :")
    if query:
        try:
            cursor.execute(query)
            if query.strip().lower().startswith("select"):
                results = cursor.fetchall()
                result_text = "\n".join([str(row) for row in results])
                messagebox.showinfo("Résultats", f"Résultats :\n{result_text}")
            else:
                messagebox.showinfo("Succès", "Requête exécutée avec succès.")
        except Error as e:
            messagebox.showerror("Erreur", f"Erreur lors de l'exécution de la requête : {e}")

def main_menu(connection):
    def open_table_menu():
        def show_tables_action():
            show_tables(cursor)

        def view_table_content_action():
            view_table_content(cursor)

        def modify_table_action():
            modify_table(cursor)

        table_window = tk.Toplevel(root)
        table_window.title("Menu des Tables")
        dimmension_fenetre(table_window)
        tk.Button(table_window, text="Afficher les tables", command=show_tables_action).pack(pady=5)
        tk.Button(table_window, text="Voir le contenu des tables", command=view_table_content_action).pack(pady=5)
        tk.Button(table_window, text="Modifier une table", command=modify_table_action).pack(pady=5)
        tk.Button(table_window, text="Retour", command=table_window.destroy).pack(pady=5)

    def open_query_menu():
        def execute_query_action():
            execute_query(cursor)

        query_window = tk.Toplevel(root)
        query_window.title("Menu des Requêtes")
        dimmension_fenetre(query_window)
        tk.Button(query_window, text="Exécuter une requête SQL", command=execute_query_action).pack(pady=5)
        tk.Button(query_window, text="Retour", command=query_window.destroy).pack(pady=5)

    def quit_application():
        cursor.close()
        connection.close()
        root.destroy()

    root = tk.Tk()
    root.title("Menu Principal")
    cursor = connection.cursor()
    dimmension_fenetre(root)

    def import_csv():
        try:
            selmarin.import_csv()
            messagebox.showinfo("Succès", "Données importées avec succès depuis CSV via tumesaoul.")
        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur lors de l'importation via tumesaoul : {e}")

    # Boutons principaux
    tk.Button(root, text="Afficher et modifier les tables", command=open_table_menu).pack(pady=5)
    tk.Button(root, text="Exécuter des requêtes SQL", command=open_query_menu).pack(pady=5)
    tk.Button(root, text="Importer un fichier CSV", command=import_csv).pack(pady=5)

    # Zone requêtes prédéfinies
    tk.Label(root, text="Exécuter une requête prédéfinie :").pack(pady=5)
    combo = ttk.Combobox(root, values=list(requêtes.keys()), state="readonly")
    combo.pack(pady=5)

    output = tk.Text(root, height=10, width=80)
    output.pack(pady=5)

    def executer_requete():
        requete_nom = combo.get()
        sql = requêtes.get(requete_nom)
        if not sql:
            messagebox.showerror("Erreur", "Aucune requête sélectionnée.")
            return
        try:
            cursor.execute(sql)
            if sql.strip().upper().startswith("SELECT"):
                resultats = cursor.fetchall()
                colonnes = [desc[0] for desc in cursor.description]
                output.delete("1.0", tk.END)
                output.insert(tk.END, " | ".join(colonnes) + "\n")
                output.insert(tk.END, "-" * 60 + "\n")
                for ligne in resultats:
                    output.insert(tk.END, " | ".join(str(x) for x in ligne) + "\n")
            else:
                connection.commit()
                output.delete("1.0", tk.END)
                output.insert(tk.END, "Requête exécutée avec succès.")
        except Exception as e:
            messagebox.showerror("Erreur SQL", str(e))

    tk.Button(root, text="Exécuter", command=executer_requete).pack(pady=5)

    tk.Button(root, text="Quitter", command=quit_application).pack(pady=5)

    root.mainloop()

def dimmension_fenetre(fenetre):
    screen_width = fenetre.winfo_screenwidth()
    screen_height = fenetre.winfo_screenheight()
    window_width = screen_width // 2
    window_height = screen_height // 2
    position_x = (screen_width - window_width) // 2
    position_y = (screen_height - window_height) // 2
    fenetre.geometry(f"{window_width}x{window_height}+{position_x}+{position_y}")

if __name__ == "__main__":
    connection = connect_to_database()
    if connection:
        main_menu(connection)
