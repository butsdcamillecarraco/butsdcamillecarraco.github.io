library(sampling)

# Sélection du répertoire de travail et importation des données
setwd("C:/Users/camil/OneDrive/Devoir/Semestre 2/Stat des/SAE")

# Partie 1.1

# 1 Import des fichiers à notre disposition
table <- read.csv2(file="population_francaise_communes.csv",sep=";",dec=",",header=TRUE)

# Filtre
donnees <- table[table$Nom.de.la.région == "Île-de-France",c("Code.département","Commune","Population.totale") ]
head(donnees)

# 2 Variable U
U = donnees$Commune
head(U)

# Nombre de communes dans U
N = length(U)

#Conversion des données caractère en données numerique
donnees$Population.totale <- as.numeric(gsub("[^0-9]", "", donnees$Population.totale))


# 3 Nombre d'habitant total en Île-de-France
T = sum(donnees$Population.totale)

# 4 Tirage aléatoire
n = 100
E = sample(U,n)
length(E)
head(E)

# 5 Donnee tout echantillon
donnees1 = donnees[donnees$Commune %in% E, ]
head(donnees1)

# Moyenne echantilon
xbar = mean(donnees1$Population.totale)

# 6 IDC pour Mu
idcmoy = t.test(donnees1$Population.totale)$conf.int
idcmoy

# Estimation 
T_est = N*xbar
T_est

# IDC de T
idcT = idcmoy*N
idcT

# 7 Marge d'erreur
marge = (idcT[2]- idcT[1])/2
marge

# Partie 1.2

# Paramètres pour les strates
k <- 4
bornes <- quantile(donnees$Population.totale, probs = seq(0, 1, length.out = k + 1), na.rm = TRUE)
donnees$strate <- cut(donnees$Population.totale, breaks = bornes, labels = 1:k, include.lowest = TRUE)

# Préparation de la table ordonnée et calcul des effectifs
datastrat <- donnees[, c("Code.département","Commune", "Population.totale", "strate")]
data <- datastrat[order(datastrat$strate), ]
Nh <- table(data$strate)
Nh
N <- sum(Nh)
N

# Calcul des poids des strates et des tailles d'échantillon pour chaque strate
n <- 100
gh <- Nh / N
nh <- round(n * Nh / N)
fh <- nh / Nh

# Estimation des paramètres stratifiés sans boucle
st <- strata(data, stratanames = c("strate"), size = nh, method = "srswr")
data1 <- getdata(data, st)
head(data1)
length((data1$Commune))

#3
ech1=data1[data1$strate==1, ]
ech1
ech2=data[data1$strate==2, ]
ech2
ech3=data1[data1$strate==3, ]
ech3
ech4=data1[data1$strate==4, ]
ech4

#moyennes des 4 sous-echantillons
data$Population.totale <- as.numeric(gsub(" ", "", donnees$Population.totale))
m1=mean(ech1$Population.totale)
m2=mean(ech2$Population.totale)
m3=mean(ech3$Population.totale)
m4=mean(ech4$Population.totale)

#variances des 4 sous-echantillons
var1=var(ech1$Population.totale)
var2=var(ech2$Population.totale)
var3=var(ech3$Population.totale)
var4=var(ech4$Population.totale)

#moyenne des 4 echant reunis
Xbarst=(Nh[1]*m1 + Nh[2]*m2+ Nh[3]*m3+ Nh[3]*m3+ Nh[4]*m4)/N

#estimation de la variance de Xbarst
varXbarst<-((gh[1])^2)*(1-fh[1])*var1/(nh[1])+((gh[2])^2)*(1-fh[2])*var1/(nh[2])+((gh[3])^2)*(1-fh[3])*var1/(nh[3])+((gh[4])^2)*(1-fh[4])*var1/(nh[4])

#idc pour mu a 95%
alpha=0.05
binf = Xbarst-qnorm(1-alpha/2)*sqrt(varXbarst)
bsup = Xbarst+qnorm(1-alpha/2)*sqrt(varXbarst)
idcmoy=c(binf, bsup)

#estim du total T
Tstr=N*Xbarst
Tstr

#estimation par IDC du total T
binf=idcmoy[1]*N
binf
bsup=idcmoy[2]*N
bsup
idcT=c(binf, bsup)
idcT

#marge d'erreur
marge=(idcT[2]-idcT[1])/2
marge


# Partie 2

# 1 Import des fichiers à notre disposition
tablesport = read.csv2("EnqueteSportEtudiant2024.csv",sep = ";", dec = ";", header = TRUE)
head(tablesport)

#4 : on croise la variable sport avec le sexe/alternance/département de formation
# Tableaux croisés
TCD_Sexe = table(tablesport$sport, tablesport$sexe)
TCD_Alternant = table(tablesport$sport, tablesport$alternant)
TCD_Dept = table(tablesport$sport, tablesport$deptformation)
TCD_niveau = table(tablesport$sport, tablesport$niveau)
TCD_logement = table(tablesport$sport, tablesport$logement)
TCD_fumer = table(tablesport$sport, tablesport$fumer)
TCD_alimentation = table(tablesport$sport, tablesport$alimentation)
TCD_sante = table(tablesport$sport, tablesport$sante)

TCD_Sexe
TCD_Alternant
TCD_Dept
TCD_niveau
TCD_logement
TCD_fumer
TCD_alimentation
TCD_sante

# Test du khi2
khideux_Sexe= chisq.test(TCD_Sexe)
khideux_Sexe #p-value = 0.0006292 --> relation significative

khideux_Alternant= chisq.test(TCD_Alternant)
khideux_Alternant #p-value = 0,14 --> preuve modérée contre l'hypothèse nulle, peut-être que c'est dû au hasard

khideux_Dept= chisq.test(TCD_Dept)
khideux_Dept #p-value = 0.004557 --> relation significative

khideux_niveau= chisq.test(TCD_niveau)
khideux_niveau #p-value = 0.1238 --> c'est moyen

khideux_logement= chisq.test(TCD_logement)
khideux_logement #p-value = 0.3084 --> preuve modérée pour l'hypothèse nulle

khideux_fumer= chisq.test(TCD_fumer)
khideux_fumer #p-value = 0.6666 --> très élevé, il n'y a quasiment pas de lien

khideux_alimentation= chisq.test(TCD_alimentation)
khideux_alimentation #p-value = 0.000241 --> relation significative

khideux_sante= chisq.test(TCD_sante)
khideux_sante #p-value = 0.7028 --> très élevé, il n'y a quasiment pas de lien

# V de Cramer
n<-dim(tablesport)[1]
p <- nrow(TCD_Sexe)
q <- ncol(TCD_Sexe)
m <- min(p-1, q-1)
V_Sexe =sqrt(khideux_Sexe$statistic/(n*m))
V_Sexe #lui il est bien

n<-dim(tablesport)[1]
p <- nrow(TCD_alimentation)
q <- ncol(TCD_alimentation)
m <- min(p-1, q-1)
V_alimentation =sqrt(khideux_alimentation$statistic/(n*m))
V_alimentation #lui il est bien et mieux

n<-dim(tablesport)[1]
p <- nrow(TCD_Dept)
q <- ncol(TCD_Dept)
m <- min(p-1, q-1)
V_Dept =sqrt(khideux_Dept$statistic/(n*m))
V_Dept # lui il est bien

n<-dim(tablesport)[1]
p <- nrow(TCD_Alternant)
q <- ncol(TCD_Alternant)
m <- min(p-1, q-1)
V_Alternant =sqrt(khideux_Alternant$statistic/(n*m))
V_Alternant #nul

n<-dim(tablesport)[1]
p <- nrow(TCD_niveau)
q <- ncol(TCD_niveau)
m <- min(p-1, q-1)
V_niveau =sqrt(khideux_niveau$statistic/(n*m))
V_niveau #nul

n<-dim(tablesport)[1]
p <- nrow(TCD_logement)
q <- ncol(TCD_logement)
m <- min(p-1, q-1)
V_logement =sqrt(khideux_logement$statistic/(n*m))
V_logement #nul

n<-dim(tablesport)[1]
p <- nrow(TCD_fumer)
q <- ncol(TCD_fumer)
m <- min(p-1, q-1)
V_fumer =sqrt(khideux_fumer$statistic/(n*m))
V_fumer #nul

n<-dim(tablesport)[1]
p <- nrow(TCD_sante)
q <- ncol(TCD_sante)
m <- min(p-1, q-1)
V_sante =sqrt(khideux_sante$statistic/(n*m))
V_sante #nul


